kpUm31fPKRQ6H8vF

manoranjanrkl2009


mongodb+srv://manoranjanrkl2009:kpUm31fPKRQ6H8vF@cluster0.m3w90.mongodb.net/















import React, { useState } from "react";
import { ImCross } from "react-icons/im";
import upload from "./../assets/upload_area.png";
import axios from "axios";
import toast, { Toaster } from 'react-hot-toast';


const Modal = ({ openModal, setOpenModal }) => {
  const [image, setImage] = useState(null);
  const [data, setData] = useState({
    employee_name: "",
    employee_email: "",
    employee_Id: "",
    employee_mobile: "",
    employee_gender: "",
    employee_designation: "",
    employee_course: "",
    employee_profile_photo: "",
  });

  const handleInputChange = (event) => {
    const name = event.target.name;
    const value = event.target.value;
    setData((data) => ({ ...data, [name]: value }));
  };    

  const handleSubmit = async (event) => {
    event.preventDefault();

    const formData = new FormData();
    formData.append("employee_name", data.employee_name);
    formData.append("employee_email", data.employee_email);
    formData.append("employee_Id", data.employee_Id);
    formData.append("employee_mobile", data.employee_mobile);
    formData.append("employee_gender", data.employee_gender);
    formData.append("employee_designation", data.employee_designation);
    formData.append("employee_course", data.employee_course);
    formData.append("employee_profile_photo", image);

    

   try {
     axios.post("http://localhost:5000/api/employee/add_employee", formData)
     .then((response)=>{
        if (response.data && response.data.success) {
            console.log("Success:", response.data.success);
            console.log("success")
            setData({
                employee_name: "",
                employee_email: "",
                employee_Id: "",
                employee_mobile: "",
                employee_gender: "",
                employee_designation: "",
                employee_course: "",
            })
            setImage(false)
            toast.success("Employee Added Successfully!!!")
            setOpenModal(false)
        }
        else{
            console.log("something went wrong")
            toast.error("Employee not added!!!")
        }
     })
  
   } catch (error) {
        console.log(error)
        console.error("Error response:", error.response);
        console.error("Error message:", error.message);
        console.log("something went wrong2")
   }
  }
  
  
  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
      <div className="flex transform -translate-x-1/2 -translate-y-1/2 absolute md:top-1/2 md:left-1/2 md:w-[450px] md:h-[700px] z-50  text-black px-4 font-semibold overflow-x-hidden overflow-y-auto inset-0 bg-white outline-none focus:outline-none flex-col justify-center items-center rounded-lg">
      <Toaster/>
        <ImCross
          className="absolute z-50 text-xl text-black top-4 right-3"
          onClick={() => setOpenModal(false)}
        />
        <h1 className="text-2xl border-b border-black">Add New Employee</h1>
        <form className="flex flex-col gap-4 mt-10"onSubmit={handleSubmit}>
          <div className="flex items-center gap-4">
            <label
              htmlFor="employee_id"
              className="w-32 text-black align-baseline"
            >
              Employee Id
            </label>
            <input
              id="employee_id"
              type="text"
              placeholder="Enter Employee Id "
              name="employee_Id"
              value={data.employee_Id}
              onChange={handleInputChange}
              className="flex-1 px-4 py-1 border-b border-black outline-none w-60"
            />
          </div>
          <div className="flex items-center gap-4">
            <label
              htmlFor="employee_name"
              className="w-32 text-black align-baseline"
            >
              Employee Name
            </label>
            <input
              id="employee_name"
              type="text"
              placeholder="Enter Employee Name"
              name="employee_name"
              value={data.employee_name}
              onChange={handleInputChange}
              className="flex-1 px-4 py-1 border-b border-black outline-none w-60"
            />
          </div>
          <div className="flex items-center gap-4">
            <label
              htmlFor="employee_email"
              className="w-32 text-black align-baseline"
            >
              Email
            </label>
            <input
              id="employee_email"
              type="text"
              placeholder="Enter Email"
              name="employee_email"
              value={data.employee_email}
              onChange={handleInputChange}
              className="flex-1 px-4 py-1 border-b border-black outline-none w-60"
            />
          </div>
          <div className="flex items-center gap-4">
            <label htmlFor="mobile" className="w-32 text-black align-baseline">
              Mobile
            </label>
            <input
              id="mobile"
              type="number"
              placeholder="Enter Mobile no"
              name="employee_mobile"
              value={data.employee_mobile}
              onChange={handleInputChange}
              className="flex-1 px-4 py-1 border-b border-black outline-none w-60"
            />
          </div>
          <div className="flex items-center gap-4">
            <label htmlFor="gender" className="w-32 text-black align-baseline">
              Gender
            </label>
            <select
              id="gender"
              className="flex-1 px-4 py-1 border-b border-black outline-none w-60"
              name="employee_gender"
              value={data.employee_gender}
              onChange={handleInputChange}
            >
              <option value="">Select Gender</option>
              <option value="Male">Male</option>
              <option value="Female">Female</option>
            </select>
          </div>
          <div className="flex items-center gap-4">
            <label htmlFor="course" className="w-32 text-black align-baseline">
              Course
            </label>
            <select
              id="course"
              className="flex-1 px-4 py-1 border-b border-black outline-none w-60"
              name="employee_course"
              value={data.employee_course}
              onChange={handleInputChange}
            >
              <option value="">Select Course</option>
              <option value="MCA">MCA</option>
              <option value="BCA">BCA</option>
              <option value="BSC">BSC</option>
            </select>
          </div>
          <div className="flex items-center gap-4">
            <label
              htmlFor="designation"
              className="w-32 text-black align-baseline"
            >
              Designation
            </label>
            <select
              id="designation"
              className="flex-1 px-4 py-1 border-b border-black outline-none w-60"
              name="employee_designation"
              value={data.employee_designation}
              onChange={handleInputChange}
            >
              <option value="">Select Gender</option>
              <option value="HR">HR</option>
              <option value="Manager">Manager</option>
              <option value="Sales">Sales</option>
            </select>
          </div>

          <div className="flex items-center gap-4">
            <label htmlFor="image" className="w-32 text-black">
              Profile Photo
            </label>
            <label htmlFor="image" className="w-32 text-white ">
              <img
                src={image ? URL.createObjectURL(image) : upload}
                alt=""
                className=""
                width={150}
              />
            </label>
            <input
              type="file"
              id="image"
              hidden
              onChange={(e) => setImage(e.target.files[0])}
            />
          </div>
          <button
            className="px-4 py-2 mt-4 text-white bg-black rounded hover:scale-105 opacity-80"
            type="submit"
          >
            Add Employee
          </button>
        </form>
      </div>
    </div>
  );
};

export default Modal;
















import axios from "axios";
import React, { useEffect, useState } from "react";
import { FaEdit, FaEye } from "react-icons/fa";
import { TiDelete } from "react-icons/ti";
import Modal from "./Modal";
import EditModal from "./EditModal";
import ViewEmployee from "./ViewEmployee.";
import Lottie from "lottie-react";
import loader from './../assets/loader2.json';



const EmployeeList = () => {
  const [loading,setLoading] = useState(true)
  const [employee, setEmployee] = useState([]);
  const [openModal, setOpenModal] = useState(false);

  const [searchQuery, setSearchQuery] = useState("");
 

  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedEmployee, setSelectedEmployee] = useState(null);

  const[viewModal, setViewModal] = useState(false);


  const handleViewModal = (employee) => {
    setSelectedEmployee(employee);
    setViewModal(true);
  };

  const closeViewModal = () => {
    setViewModal(false);
    setSelectedEmployee(null);
  };

  const handleEditModal = (employee) => {
    setSelectedEmployee(employee);
    setIsModalOpen(true);
  };

  const closeModal = () => {
    setIsModalOpen(false);
    setSelectedEmployee(null);
  };

  

 
    const getEmployees = async () => {
      const endpoint = searchQuery
      ? `http://localhost:5000/api/employee/search?q=${encodeURIComponent(
          searchQuery
        )}`
      : "http://localhost:5000/api/employee/get_employee";
      try {
        await axios
          .get(endpoint)
          .then((response) => {
            setEmployee(response.data.data);
            setLoading(false);
          });
        
      } catch (error) {
        console.log(error);
      }
    };

    useEffect(() => {
      getEmployees();
    }, []);

  const onhandleEditSuccess = () => {
    getEmployees();
    closeViewModal();
  }

  return (
    loading ? (
     <div className="w-lvw h-[90vh] flex justify-center items-center overflow-hidden"> <Lottie animationData={loader} loop={true} /></div>
    ) :
      
     <div className="mt-10 overflow-hidden">
      <table className="w-full mt-10 text-center table-fixed hover:table-fixed">
        <thead>
          <tr>
            <th>Profile Photo</th>
            <th>Employee Id</th>
            <th> Name</th>
            <th> Designation</th>
            <th> Gender</th>
            <th> Email</th>
            <th> Mobile</th>
            <th> Course</th>
            <th>Joining Date</th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody className="mt-10">
          {employee.map((emp, index) => {
            return (
              <tr key={index} className="p-40">
                <td className="flex justify-center">
                  <img
                    src={`http://localhost:5000/images/${emp.employee_profile_photo}`}
                    alt=""
                    className="w-10 rounded-full"
                  />
                </td>
                <td>{emp.employee_Id}</td>
                <td className="font-semibold">{emp.employee_name}</td>
                <td className="">
                   {
                    emp.employee_designation === 'Manager' ?
                      <p className="px-1 py-1 text-white bg-green-500 rounded-md">{emp.employee_designation}</p> : 

                      emp.employee_designation === 'HR' ?
                      <p className="px-1 py-1 text-white bg-blue-500 rounded-md">{emp.employee_designation}</p> : 

                      emp.employee_designation === 'Sales' ?
                      <p className="px-1 py-1 text-white bg-red-500 rounded-md ">{emp.employee_designation}</p> : <></>
                   }
                </td>
                <td>{emp.employee_gender}</td>
                <td>{emp.employee_email}</td>
                <td>{emp.employee_mobile}</td>
                <td>{emp.employee_course}</td>
                <td>{emp.joinedAt.substring(0, 10)}</td>
                <td className="flex items-center justify-center gap-4 mb-4">
                  <FaEdit
                    className="text-xl text-blue-600"
                    onClick={() => handleEditModal(emp)}
                  />
                  <FaEye className="text-2xl text-green-600" onClick={() => handleViewModal(emp)}/>
                  <TiDelete className="text-3xl text-red-600" />
                </td>
              </tr>
            );
          })}
        </tbody>
      </table>
      {openModal && <Modal openModal={openModal} setOpenModal={setOpenModal} />}

      {isModalOpen && (
        <EditModal
          employee={selectedEmployee}
          closeModal={closeModal}
          onEditSuccess={onhandleEditSuccess}
        />
      )}
      {
        viewModal && <ViewEmployee employee={selectedEmployee} closeViewModal={closeViewModal}/>
      }
    </div> 

  );
};

export default EmployeeList;



















import React, { useState } from "react";
import background from "./../assets/background-1.png";
import Modal from "./Modal";
import EmployeeList from "./EmployeeList";

const Employees = () => {
  const [openModal, setOpenModal] = useState(false);

  const [search, setSearch] = useState("");


  const handleModal = () => {
    setOpenModal(!openModal);
  };

  const handleSearchChange = (event) => {
    setSearch(event.target.value);
  };

  console.log("employee.jsx" ,search)

  return (
    <div
      className="px-[5vw]"
      style={{
        width: "99vw",
        height: "90vh",
        backgroundImage: `url(${background})`,
        backgroundSize: "cover",
        backgroundPosition: "center",
      }}
    >
      <div className="flex items-center justify-between pt-28">
        <p className="text-4xl ">Employees List</p>
      
          <input
            type="text"
            className="px-4 py-2 bg-transparent border-b border-black w-[500px] outline-none"
            placeholder="Search"
            value={search}
            onChange={handleSearchChange}
          />
       
        <button
          className="px-4 py-2 font-semibold text-white bg-black rounded-md hover:opacity-75"
          onClick={handleModal}
        >
          Add Employee
        </button>
        {openModal && (
          <Modal openModal={openModal} setOpenModal={setOpenModal} />
        )}
      </div>
      <EmployeeList searchQuery={search} />
    </div>
  );
};

export default Employees;

